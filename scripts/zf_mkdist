#! /bin/bash -e
#
# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: (c) 2020-2024 Advanced Micro Devices, Inc.
#
##############################################################################
# Builds a TCPDirect package for use by customers, containing prebuilt
# libraries and binaries in both debug and release forms, and scripts
# to install and uninstall the package
##############################################################################


my_dir=$(cd $(dirname "$0") && /bin/pwd)
top_dir=$(dirname "${my_dir}")

copy_to_tmpdir="
Makefile
Makefile.onload
Makefile-top.inc
src
scripts
"

usage() {
    echo
    echo "usage:"
    echo "  $(basename $0) [options] <onload_tarball>"
    echo
    echo "options:"
    echo "  --version <version>"
    echo "  --shim"
    echo
    exit 1
}


cleanup() {
    echo "Deleting ${tmpdir}"
    rm -rf "${tmpdir}"
}


copy_files_to_tmpdir() {
    mkdir -p "${onload_tmpdir}"
    mkdir -p "${zf_tmpdir}"
    tar cz -C "${top_dir}" ${copy_to_tmpdir} | tar xz -C ${zf_tmpdir}
    cat "${onload_tarball}" | tar xz -C ${onload_tmpdir}
}


build_zf() {
    "${zf_tmpdir}"/scripts/zf_mkdist_build "${build_opts}"
}


grab_artifacts_from_tmpdir() {
    tmpdir="${zf_tmpdir}/build/artifacts"
    local_dir="${top_dir}/build/artifacts"
    mkdir -p "${local_dir}"
    tar cz -C "${tmpdir}" . | tar zx -C "${local_dir}"
}

make_release_package() {
    package_version="$1"
    "${top_dir}"/scripts/zf_make_tarball --version "${package_version}" --name "zf"
}

######################################################################
# main()

version=
stripped=true
build_opts=""
onload_tarball=
tarball_count=0

while [ $# -gt 0 ]; do
    case "$1" in
        --version)  shift; version="$1";;
        --unstripped) stripped=false;;
        --shim) build_opts+="--shim";;
        -*)  usage;;
        *)  onload_tarball="$1"; tarball_count=$((tarball_count+1));;
    esac
    shift
done

if [ -z "$version" ]; then
    version=$(git rev-parse HEAD)
fi

[ $tarball_count -eq 1 ] || usage

tmpdir=$(mktemp -d)
onload_tmpdir="${tmpdir}/onload"
zf_tmpdir="${tmpdir}/zf"
trap cleanup EXIT

copy_files_to_tmpdir
build_zf
grab_artifacts_from_tmpdir
make_release_package "${version}"
